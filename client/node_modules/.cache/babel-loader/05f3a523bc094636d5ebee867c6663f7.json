{"ast":null,"code":"var _jsxFileName = \"/Users/eyallevyg/developer/ghost_climber/client/src/context/contadores/ContadoresState.js\";\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport ContadoresContext from './contadoresContext';\nimport contadoresReducer from './contadoresReducer';\nimport { GET_CONTADORES, ADD_CONTADORES, LOADING_CONTADORES, ERROR_CONTADORES, GET_CONTADORES_SECTOR, UPDATE_CONTADORES, FILTRAR_CONTADORES, SET_FECHA } from '../types';\nimport sameDay from '../../utils/sameDay';\n\nconst ContadoresState = props => {\n  const initialState = {\n    contadores: null,\n    contadoresDay: null,\n    contadorSector: null,\n    contadorSectorDay: null,\n    thisFecha: new Date(),\n    loading: false,\n    error: null\n  };\n  const [state, dispatch] = useReducer(contadoresReducer, initialState); // Loading\n\n  const loadingContadores = () => {\n    const loading = true;\n    dispatch({\n      type: LOADING_CONTADORES,\n      payload: loading\n    });\n  }; // Obtener contadores por subsector\n\n\n  const getContadores = async () => {\n    try {\n      loadingContadores();\n      const res = await axios.get(`/api/v1/contadores`);\n      let contadores = res.data.data;\n      dispatch({\n        type: GET_CONTADORES,\n        payload: contadores\n      });\n    } catch (err) {\n      dispatch({\n        type: ERROR_CONTADORES,\n        payload: err.response\n      });\n    }\n  }; // Obtener contadores por sector\n\n\n  const getContadorSector = async zonas => {\n    try {\n      loadingContadores();\n      const sectores = zonas.map(z => z.sector);\n      const sectoresId = [];\n\n      for (let i = 0; i < sectores.length; i++) {\n        sectores[i].map(s => sectoresId.push(s._id));\n      }\n\n      const res = await Promise.all(sectoresId.map(id => axios.get(`/api/v1/sectores/${id}/contadores`)));\n      const contadorSector = res.map(p => p.data.data).flat(2);\n      dispatch({\n        type: GET_CONTADORES_SECTOR,\n        payload: contadorSector\n      });\n    } catch (err) {\n      dispatch({\n        type: ERROR_CONTADORES,\n        payload: err.response\n      });\n    }\n  }; // Add contador\n\n\n  const addContador = async (contador, contadorId, sectorId) => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    if (!contadorId) {\n      try {\n        const res = await axios.post(`/api/v1/subsectores/${contador.subsector._id}/contadores/`, contador, config);\n        res.data.data.sectorId = sectorId;\n        state.contadorSector.filter(cS => sameDayFecha(cS.fecha, state.thisFecha));\n        res.data.data.deltaContador = contador.contador;\n        dispatch({\n          type: ADD_CONTADORES,\n          payload: res.data.data\n        });\n      } catch (err) {\n        dispatch({\n          type: ERROR_CONTADORES,\n          payload: err.response.msg\n        });\n      }\n    } else {\n      try {\n        const res = await axios.put(`/api/v1/contadores/${contadorId}`, contador, config);\n        res.data.data.sectorId = sectorId;\n        res.data.data.deltaContador = contador.contador;\n        dispatch({\n          type: UPDATE_CONTADORES,\n          payload: res.data.data\n        });\n      } catch (err) {\n        dispatch({\n          type: ERROR_CONTADORES,\n          payload: err.response.msg\n        });\n      }\n    }\n  }; // Filtrar contador para subsector\n\n\n  const setThisContador = subsectorId => {\n    if (state.contadoresDay) {\n      let contador = state.contadoresDay.filter(cont => cont.subsector._id === subsectorId || cont.subsector === subsectorId);\n\n      if (contador.length === 0) {\n        contador = [{\n          subsector: {\n            _id: subsectorId\n          },\n          fecha: state.thisFecha,\n          contador: 0,\n          dbStatus: 401\n        }];\n      }\n\n      return contador[0];\n    }\n  }; // Fijar fecha\n\n\n  const setFecha = fecha => {\n    dispatch({\n      type: SET_FECHA,\n      payload: fecha\n    });\n  }; // Filtrar contadores por dÃ­a seleccionado\n\n\n  const filtrarContadores = fecha => {\n    dispatch({\n      type: FILTRAR_CONTADORES,\n      payload: fecha\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(ContadoresContext.Provider, {\n    value: {\n      contadores: state.contadores,\n      contadoresDay: state.contadoresDay,\n      contadorSector: state.contadorSector,\n      contadorSectorDay: state.contadorSectorDay,\n      thisFecha: state.thisFecha,\n      loading: state.loading,\n      error: state.error,\n      getContadores,\n      loadingContadores,\n      getContadorSector,\n      addContador,\n      setThisContador,\n      filtrarContadores,\n      setFecha\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default ContadoresState;","map":{"version":3,"sources":["/Users/eyallevyg/developer/ghost_climber/client/src/context/contadores/ContadoresState.js"],"names":["React","useReducer","axios","ContadoresContext","contadoresReducer","GET_CONTADORES","ADD_CONTADORES","LOADING_CONTADORES","ERROR_CONTADORES","GET_CONTADORES_SECTOR","UPDATE_CONTADORES","FILTRAR_CONTADORES","SET_FECHA","sameDay","ContadoresState","props","initialState","contadores","contadoresDay","contadorSector","contadorSectorDay","thisFecha","Date","loading","error","state","dispatch","loadingContadores","type","payload","getContadores","res","get","data","err","response","getContadorSector","zonas","sectores","map","z","sector","sectoresId","i","length","s","push","_id","Promise","all","id","p","flat","addContador","contador","contadorId","sectorId","config","headers","post","subsector","filter","cS","sameDayFecha","fecha","deltaContador","msg","put","setThisContador","subsectorId","cont","dbStatus","setFecha","filtrarContadores","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport axios from 'axios';\n\nimport ContadoresContext from './contadoresContext';\nimport contadoresReducer from './contadoresReducer';\n\nimport {\n  GET_CONTADORES,\n  ADD_CONTADORES,\n  LOADING_CONTADORES,\n  ERROR_CONTADORES,\n  GET_CONTADORES_SECTOR,\n  UPDATE_CONTADORES,\n  FILTRAR_CONTADORES,\n  SET_FECHA,\n} from '../types';\nimport sameDay from '../../utils/sameDay';\n\nconst ContadoresState = (props) => {\n  const initialState = {\n    contadores: null,\n    contadoresDay: null,\n    contadorSector: null,\n    contadorSectorDay: null,\n    thisFecha: new Date(),\n    loading: false,\n    error: null,\n  };\n\n  const [state, dispatch] = useReducer(contadoresReducer, initialState);\n\n  // Loading\n  const loadingContadores = () => {\n    const loading = true;\n    dispatch({ type: LOADING_CONTADORES, payload: loading });\n  };\n\n  // Obtener contadores por subsector\n  const getContadores = async () => {\n    try {\n      loadingContadores();\n\n      const res = await axios.get(`/api/v1/contadores`);\n\n      let contadores = res.data.data;\n\n      dispatch({ type: GET_CONTADORES, payload: contadores });\n    } catch (err) {\n      dispatch({ type: ERROR_CONTADORES, payload: err.response });\n    }\n  };\n\n  // Obtener contadores por sector\n  const getContadorSector = async (zonas) => {\n    try {\n      loadingContadores();\n\n      const sectores = zonas.map((z) => z.sector);\n      const sectoresId = [];\n\n      for (let i = 0; i < sectores.length; i++) {\n        sectores[i].map((s) => sectoresId.push(s._id));\n      }\n\n      const res = await Promise.all(\n        sectoresId.map((id) => axios.get(`/api/v1/sectores/${id}/contadores`))\n      );\n\n      const contadorSector = res.map((p) => p.data.data).flat(2);\n\n      dispatch({ type: GET_CONTADORES_SECTOR, payload: contadorSector });\n    } catch (err) {\n      dispatch({ type: ERROR_CONTADORES, payload: err.response });\n    }\n  };\n\n  // Add contador\n  const addContador = async (contador, contadorId, sectorId) => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    if (!contadorId) {\n      try {\n        const res = await axios.post(\n          `/api/v1/subsectores/${contador.subsector._id}/contadores/`,\n          contador,\n          config\n        );\n        res.data.data.sectorId = sectorId;\n        state.contadorSector.filter((cS) =>\n          sameDayFecha(cS.fecha, state.thisFecha)\n        );\n\n        res.data.data.deltaContador = contador.contador;\n        dispatch({ type: ADD_CONTADORES, payload: res.data.data });\n      } catch (err) {\n        dispatch({ type: ERROR_CONTADORES, payload: err.response.msg });\n      }\n    } else {\n      try {\n        const res = await axios.put(\n          `/api/v1/contadores/${contadorId}`,\n          contador,\n          config\n        );\n        res.data.data.sectorId = sectorId;\n        res.data.data.deltaContador = contador.contador;\n        dispatch({ type: UPDATE_CONTADORES, payload: res.data.data });\n      } catch (err) {\n        dispatch({ type: ERROR_CONTADORES, payload: err.response.msg });\n      }\n    }\n  };\n\n  // Filtrar contador para subsector\n  const setThisContador = (subsectorId) => {\n    if (state.contadoresDay) {\n      let contador = state.contadoresDay.filter(\n        (cont) =>\n          cont.subsector._id === subsectorId || cont.subsector === subsectorId\n      );\n\n      if (contador.length === 0) {\n        contador = [\n          {\n            subsector: {\n              _id: subsectorId,\n            },\n            fecha: state.thisFecha,\n            contador: 0,\n            dbStatus: 401,\n          },\n        ];\n      }\n\n      return contador[0];\n    }\n  };\n\n  // Fijar fecha\n  const setFecha = (fecha) => {\n    dispatch({ type: SET_FECHA, payload: fecha });\n  };\n\n  // Filtrar contadores por dÃ­a seleccionado\n  const filtrarContadores = (fecha) => {\n    dispatch({ type: FILTRAR_CONTADORES, payload: fecha });\n  };\n\n  return (\n    <ContadoresContext.Provider\n      value={{\n        contadores: state.contadores,\n        contadoresDay: state.contadoresDay,\n        contadorSector: state.contadorSector,\n        contadorSectorDay: state.contadorSectorDay,\n        thisFecha: state.thisFecha,\n        loading: state.loading,\n        error: state.error,\n        getContadores,\n        loadingContadores,\n        getContadorSector,\n        addContador,\n        setThisContador,\n        filtrarContadores,\n        setFecha,\n      }}\n    >\n      {props.children}\n    </ContadoresContext.Provider>\n  );\n};\n\nexport default ContadoresState;\n"]},"metadata":{},"sourceType":"module"}