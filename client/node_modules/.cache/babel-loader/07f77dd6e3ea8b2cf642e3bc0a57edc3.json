{"ast":null,"code":"var _jsxFileName = \"/Users/eyallevyg/developer/ghost_climber/client/src/context/zonas/ZonasState.js\";\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport groupBy from 'lodash/groupBy';\nimport renameKeys from '../../utils/renameKeys';\nimport ZonasContext from './zonasContext';\nimport zonasReducer from './zonasReducer';\nimport { GET_ZONAS, ZONAS_ERROR, LOADING_ZONAS } from '../types';\n\nconst ZonasState = props => {\n  const initialState = {\n    zonas: null,\n    loading: false,\n    current: null,\n    filtered: null,\n    error: null\n  };\n  const [state, dispatch] = useReducer(zonasReducer, initialState); // Loading\n\n  const loadingZonas = () => {\n    const loading = true;\n    dispatch({\n      type: LOADING_ZONAS,\n      payload: loading\n    });\n  }; // Get Zonas\n\n\n  const getZonas = async () => {\n    try {\n      loadingZonas();\n      const res = await axios.get('/api/v1/sectores');\n      let zonas = res.data.data;\n      zonas = Object.entries(groupBy(zonas, 'comuna')).map(zona => renameKeys({\n        0: 'comuna',\n        1: 'sector'\n      }, zona));\n      dispatch({\n        type: GET_ZONAS,\n        payload: zonas\n      });\n    } catch (err) {\n      dispatch({\n        type: ZONAS_ERROR,\n        payload: err.response\n      });\n    }\n  }; // Obtener contadores por sector\n\n\n  const getContadorSector = async () => {\n    try {\n      loadingContadores();\n\n      if (state.zonas) {\n        const sectores = state.zonas.map(z => z.sector);\n      }\n\n      const sectoresId = [];\n\n      for (let i = 0; i < sectores.length; i++) {\n        sectores[i].map(s => sectoresId.push(s._id));\n      }\n\n      const res = await Promise.all(sectoresId.map(id => axios.get(`/api/v1/sectores/${id}/contadores`)));\n      const contadorSector = res.map(p => p.data.data).flat(2);\n      dispatch({\n        type: GET_CONTADORES_SECTOR,\n        payload: contadorSector\n      });\n    } catch (err) {\n      dispatch({\n        type: ERROR_CONTADORES,\n        payload: err.response\n      });\n    }\n  }; // // Filter Contacts\n  // const filterContacts = (text) => {\n  //   dispatch({ type: FILTER_CONTACTS, payload: text });\n  // };\n  // // Clear Filter\n  // const clearFilter = () => {\n  //   dispatch({ type: CLEAR_FILTER });\n  // };\n  // // Clear Contacts\n  // const clearContacts = () => dispatch({ type: CLEAR_CONTACTS });\n\n\n  return /*#__PURE__*/React.createElement(ZonasContext.Provider, {\n    value: {\n      zonas: state.zonas,\n      loading: state.loading,\n      current: state.current,\n      filtered: state.filtered,\n      error: state.error,\n      // filterContacts,\n      // clearFilter,\n      getZonas,\n      getContadorSector,\n      // clearContacts,\n      loadingZonas\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default ZonasState;","map":{"version":3,"sources":["/Users/eyallevyg/developer/ghost_climber/client/src/context/zonas/ZonasState.js"],"names":["React","useReducer","axios","groupBy","renameKeys","ZonasContext","zonasReducer","GET_ZONAS","ZONAS_ERROR","LOADING_ZONAS","ZonasState","props","initialState","zonas","loading","current","filtered","error","state","dispatch","loadingZonas","type","payload","getZonas","res","get","data","Object","entries","map","zona","err","response","getContadorSector","loadingContadores","sectores","z","sector","sectoresId","i","length","s","push","_id","Promise","all","id","contadorSector","p","flat","GET_CONTADORES_SECTOR","ERROR_CONTADORES","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport axios from 'axios';\nimport groupBy from 'lodash/groupBy';\nimport renameKeys from '../../utils/renameKeys';\n\nimport ZonasContext from './zonasContext';\nimport zonasReducer from './zonasReducer';\n\nimport { GET_ZONAS, ZONAS_ERROR, LOADING_ZONAS } from '../types';\n\nconst ZonasState = (props) => {\n  const initialState = {\n    zonas: null,\n    loading: false,\n    current: null,\n    filtered: null,\n    error: null,\n  };\n\n  const [state, dispatch] = useReducer(zonasReducer, initialState);\n\n  // Loading\n  const loadingZonas = () => {\n    const loading = true;\n    dispatch({ type: LOADING_ZONAS, payload: loading });\n  };\n\n  // Get Zonas\n  const getZonas = async () => {\n    try {\n      loadingZonas();\n      const res = await axios.get('/api/v1/sectores');\n\n      let zonas = res.data.data;\n\n      zonas = Object.entries(groupBy(zonas, 'comuna')).map((zona) =>\n        renameKeys({ 0: 'comuna', 1: 'sector' }, zona)\n      );\n\n      dispatch({ type: GET_ZONAS, payload: zonas });\n    } catch (err) {\n      dispatch({ type: ZONAS_ERROR, payload: err.response });\n    }\n  };\n\n  // Obtener contadores por sector\n  const getContadorSector = async () => {\n    try {\n      loadingContadores();\n      if (state.zonas) {\n        const sectores = state.zonas.map((z) => z.sector);\n      }\n      const sectoresId = [];\n\n      for (let i = 0; i < sectores.length; i++) {\n        sectores[i].map((s) => sectoresId.push(s._id));\n      }\n\n      const res = await Promise.all(\n        sectoresId.map((id) => axios.get(`/api/v1/sectores/${id}/contadores`))\n      );\n\n      const contadorSector = res.map((p) => p.data.data).flat(2);\n\n      dispatch({ type: GET_CONTADORES_SECTOR, payload: contadorSector });\n    } catch (err) {\n      dispatch({ type: ERROR_CONTADORES, payload: err.response });\n    }\n  };\n\n  // // Filter Contacts\n  // const filterContacts = (text) => {\n  //   dispatch({ type: FILTER_CONTACTS, payload: text });\n  // };\n\n  // // Clear Filter\n  // const clearFilter = () => {\n  //   dispatch({ type: CLEAR_FILTER });\n  // };\n\n  // // Clear Contacts\n\n  // const clearContacts = () => dispatch({ type: CLEAR_CONTACTS });\n\n  return (\n    <ZonasContext.Provider\n      value={{\n        zonas: state.zonas,\n        loading: state.loading,\n        current: state.current,\n        filtered: state.filtered,\n        error: state.error,\n        // filterContacts,\n        // clearFilter,\n        getZonas,\n        getContadorSector,\n        // clearContacts,\n        loadingZonas,\n      }}\n    >\n      {props.children}\n    </ZonasContext.Provider>\n  );\n};\n\nexport default ZonasState;\n"]},"metadata":{},"sourceType":"module"}