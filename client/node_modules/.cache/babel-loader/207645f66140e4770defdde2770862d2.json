{"ast":null,"code":"var _jsxFileName = \"/Users/eyallevyg/developer/ghost_climber/client/src/context/contadores/ContadoresState.js\";\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport ContadoresContext from './contadoresContext';\nimport contadoresReducer from './contadoresReducer';\nimport { GET_CONTADORES, ADD_CONTADORES, REST_CONTADORES, LOADING_CONTADORES, ERROR_CONTADORES, GET_CONTADORES_SECTOR } from '../types';\n\nconst ContadoresState = props => {\n  const initialState = {\n    contadores: null,\n    contadorSector: null,\n    loading: false,\n    error: null\n  };\n  const [state, dispatch] = useReducer(contadoresReducer, initialState); // Loading\n\n  const loadingContadores = () => {\n    const loading = true;\n    dispatch({\n      type: LOADING_CONTADORES,\n      payload: loading\n    });\n  }; // Obtener contadores por subsector\n\n\n  const getContadores = async () => {\n    try {\n      loadingContadores();\n      console.log(this.state.loading);\n      const res = await axios.get(`/api/v1/contadores`);\n      let contadores = res.data.data;\n      dispatch({\n        type: GET_CONTADORES,\n        payload: contadores\n      });\n    } catch (err) {\n      dispatch({\n        type: ERROR_CONTADORES,\n        payload: err.response\n      });\n    }\n  }; // Obtener contadores por sector\n\n\n  const getContadorSector = async zonas => {\n    try {\n      loadingContadores();\n      const sectores = zonas.map(z => z.sector);\n      const sectoresId = [];\n\n      for (let i = 0; i < sectores.length; i++) {\n        sectores[i].map(s => sectoresId.push(s._id));\n      }\n\n      const res = await Promise.all(sectoresId.map(id => axios.get(`/api/v1/sectores/${id}/contadores`)));\n      const contadorSector = res.map(p => p.data.data);\n      dispatch({\n        type: GET_CONTADORES_SECTOR,\n        payload: contadorSector\n      });\n    } catch (err) {\n      dispatch({\n        type: ERROR_CONTADORES,\n        payload: err.response\n      });\n    }\n  }; // // Filter Contacts\n  // const filterContacts = (text) => {\n  //   dispatch({ type: FILTER_CONTACTS, payload: text });\n  // };\n  // // Clear Filter\n  // const clearFilter = () => {\n  //   dispatch({ type: CLEAR_FILTER });\n  // };\n  // // Clear Contacts\n  // const clearContacts = () => dispatch({ type: CLEAR_CONTACTS });\n\n\n  return /*#__PURE__*/React.createElement(ContadoresContext.Provider, {\n    value: {\n      contadores: state.contadores,\n      contadorSector: state.contadorSector,\n      loading: state.loading,\n      error: state.error,\n      getContadores,\n      loadingContadores,\n      getContadorSector\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default ContadoresState;","map":{"version":3,"sources":["/Users/eyallevyg/developer/ghost_climber/client/src/context/contadores/ContadoresState.js"],"names":["React","useReducer","axios","ContadoresContext","contadoresReducer","GET_CONTADORES","ADD_CONTADORES","REST_CONTADORES","LOADING_CONTADORES","ERROR_CONTADORES","GET_CONTADORES_SECTOR","ContadoresState","props","initialState","contadores","contadorSector","loading","error","state","dispatch","loadingContadores","type","payload","getContadores","console","log","res","get","data","err","response","getContadorSector","zonas","sectores","map","z","sector","sectoresId","i","length","s","push","_id","Promise","all","id","p","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport axios from 'axios';\n\nimport ContadoresContext from './contadoresContext';\nimport contadoresReducer from './contadoresReducer';\n\nimport {\n  GET_CONTADORES,\n  ADD_CONTADORES,\n  REST_CONTADORES,\n  LOADING_CONTADORES,\n  ERROR_CONTADORES,\n  GET_CONTADORES_SECTOR,\n} from '../types';\n\nconst ContadoresState = (props) => {\n  const initialState = {\n    contadores: null,\n    contadorSector: null,\n    loading: false,\n    error: null,\n  };\n\n  const [state, dispatch] = useReducer(contadoresReducer, initialState);\n\n  // Loading\n  const loadingContadores = () => {\n    const loading = true;\n    dispatch({ type: LOADING_CONTADORES, payload: loading });\n  };\n\n  // Obtener contadores por subsector\n  const getContadores = async () => {\n    try {\n      loadingContadores();\n      console.log(this.state.loading);\n      const res = await axios.get(`/api/v1/contadores`);\n\n      let contadores = res.data.data;\n\n      dispatch({ type: GET_CONTADORES, payload: contadores });\n    } catch (err) {\n      dispatch({ type: ERROR_CONTADORES, payload: err.response });\n    }\n  };\n\n  // Obtener contadores por sector\n  const getContadorSector = async (zonas) => {\n    try {\n      loadingContadores();\n\n      const sectores = zonas.map((z) => z.sector);\n      const sectoresId = [];\n\n      for (let i = 0; i < sectores.length; i++) {\n        sectores[i].map((s) => sectoresId.push(s._id));\n      }\n\n      const res = await Promise.all(\n        sectoresId.map((id) => axios.get(`/api/v1/sectores/${id}/contadores`))\n      );\n\n      const contadorSector = res.map((p) => p.data.data);\n\n      dispatch({ type: GET_CONTADORES_SECTOR, payload: contadorSector });\n    } catch (err) {\n      dispatch({ type: ERROR_CONTADORES, payload: err.response });\n    }\n  };\n\n  // // Filter Contacts\n  // const filterContacts = (text) => {\n  //   dispatch({ type: FILTER_CONTACTS, payload: text });\n  // };\n\n  // // Clear Filter\n  // const clearFilter = () => {\n  //   dispatch({ type: CLEAR_FILTER });\n  // };\n\n  // // Clear Contacts\n\n  // const clearContacts = () => dispatch({ type: CLEAR_CONTACTS });\n\n  return (\n    <ContadoresContext.Provider\n      value={{\n        contadores: state.contadores,\n        contadorSector: state.contadorSector,\n        loading: state.loading,\n        error: state.error,\n        getContadores,\n        loadingContadores,\n        getContadorSector,\n      }}\n    >\n      {props.children}\n    </ContadoresContext.Provider>\n  );\n};\n\nexport default ContadoresState;\n"]},"metadata":{},"sourceType":"module"}