{"ast":null,"code":"import { GET_CONTADORES, GET_ZONAS, GET_CONTADORES_SECTOR, ADD_CONTADORES, LOADING_CONTADORES, ERROR_CONTADORES, UPDATE_CONTADORES, FILTRAR_CONTADORES, CLEAR_FILTER, SET_FECHA, LOADING_ZONAS } from '../types';\nimport moment from 'moment';\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_ZONAS:\n      return { ...state,\n        loadingZonas: false,\n        zonas: action.payload\n      };\n\n    case LOADING_CONTADORES:\n      return { ...state,\n        loading: true\n      };\n\n    case LOADING_ZONAS:\n      return { ...state,\n        loadingZonas: true\n      };\n\n    case SET_FECHA:\n      return { ...state,\n        thisFecha: action.payload\n      };\n\n    case GET_CONTADORES:\n      return { ...state,\n        contadores: action.payload,\n        loading: false\n      };\n\n    case GET_CONTADORES_SECTOR:\n      return { ...state,\n        contadorSector: action.payload,\n        loading: false\n      };\n\n    case UPDATE_CONTADORES:\n      return { ...state,\n        contadores: state.contadores.map(contador => contador._id === action.payload._id ? action.payload : contador),\n        // contadorSector: state.contadorSector.map((cS) =>\n        //   cS._id.sector === action.payload.sectorId &&\n        //   moment(cS.fecha).isSame(action.payload.fecha, 'day')\n        //     ? { ...cS, contador: cS.contador + action.payload.deltaContador }\n        //     : cS\n        // ),\n        loading: false\n      };\n\n    case ADD_CONTADORES:\n      return { ...state,\n        contadores: [...state.contadores, action.payload] // contadorSector: state.contadorSector.map((cS) =>\n        //   cS._id.sector === action.payload.sectorId &&\n        //   moment(cS.fecha).isSame(action.payload.fecha, 'day')\n        //     ? { ...cS, contador: cS.contador + action.payload.deltaContador }\n        //     : cS\n        // ),\n\n      };\n\n    case FILTRAR_CONTADORES:\n      return { ...state,\n        contadoresDay: state.contadores.filter(cont => moment(cont.fecha).isSame(action.payload, 'day')),\n        contadorSectorDay: state.contadorSector.filter(cont => moment(cont.fecha).isSame(action.payload, 'day')),\n        loading: false\n      };\n\n    case CLEAR_FILTER:\n      return { ...state,\n        contadoresDay: null,\n        contadorSectorDay: null\n      };\n\n    case ERROR_CONTADORES:\n      return { ...state,\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/eyallevyg/developer/ghost_climber/client/src/context/contadores/contadoresReducer.js"],"names":["GET_CONTADORES","GET_ZONAS","GET_CONTADORES_SECTOR","ADD_CONTADORES","LOADING_CONTADORES","ERROR_CONTADORES","UPDATE_CONTADORES","FILTRAR_CONTADORES","CLEAR_FILTER","SET_FECHA","LOADING_ZONAS","moment","state","action","type","loadingZonas","zonas","payload","loading","thisFecha","contadores","contadorSector","map","contador","_id","contadoresDay","filter","cont","fecha","isSame","contadorSectorDay","error"],"mappings":"AAAA,SACEA,cADF,EAEEC,SAFF,EAGEC,qBAHF,EAIEC,cAJF,EAKEC,kBALF,EAMEC,gBANF,EAOEC,iBAPF,EAQEC,kBARF,EASEC,YATF,EAUEC,SAVF,EAWEC,aAXF,QAYO,UAZP;AAcA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKb,SAAL;AACE,aAAO,EAAE,GAAGW,KAAL;AAAYG,QAAAA,YAAY,EAAE,KAA1B;AAAiCC,QAAAA,KAAK,EAAEH,MAAM,CAACI;AAA/C,OAAP;;AACF,SAAKb,kBAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELM,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAIF,SAAKR,aAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELG,QAAAA,YAAY,EAAE;AAFT,OAAP;;AAIF,SAAKN,SAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELO,QAAAA,SAAS,EAAEN,MAAM,CAACI;AAFb,OAAP;;AAIF,SAAKjB,cAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELQ,QAAAA,UAAU,EAAEP,MAAM,CAACI,OAFd;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKhB,qBAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELS,QAAAA,cAAc,EAAER,MAAM,CAACI,OAFlB;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF,SAAKZ,iBAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELQ,QAAAA,UAAU,EAAER,KAAK,CAACQ,UAAN,CAAiBE,GAAjB,CAAsBC,QAAD,IAC/BA,QAAQ,CAACC,GAAT,KAAiBX,MAAM,CAACI,OAAP,CAAeO,GAAhC,GAAsCX,MAAM,CAACI,OAA7C,GAAuDM,QAD7C,CAFP;AAKL;AACA;AACA;AACA;AACA;AACA;AACAL,QAAAA,OAAO,EAAE;AAXJ,OAAP;;AAaF,SAAKf,cAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELQ,QAAAA,UAAU,EAAE,CAAC,GAAGR,KAAK,CAACQ,UAAV,EAAsBP,MAAM,CAACI,OAA7B,CAFP,CAGL;AACA;AACA;AACA;AACA;AACA;;AARK,OAAP;;AAUF,SAAKV,kBAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELa,QAAAA,aAAa,EAAEb,KAAK,CAACQ,UAAN,CAAiBM,MAAjB,CAAyBC,IAAD,IACrChB,MAAM,CAACgB,IAAI,CAACC,KAAN,CAAN,CAAmBC,MAAnB,CAA0BhB,MAAM,CAACI,OAAjC,EAA0C,KAA1C,CADa,CAFV;AAKLa,QAAAA,iBAAiB,EAAElB,KAAK,CAACS,cAAN,CAAqBK,MAArB,CAA6BC,IAAD,IAC7ChB,MAAM,CAACgB,IAAI,CAACC,KAAN,CAAN,CAAmBC,MAAnB,CAA0BhB,MAAM,CAACI,OAAjC,EAA0C,KAA1C,CADiB,CALd;AAQLC,QAAAA,OAAO,EAAE;AARJ,OAAP;;AAUF,SAAKV,YAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELa,QAAAA,aAAa,EAAE,IAFV;AAGLK,QAAAA,iBAAiB,EAAE;AAHd,OAAP;;AAKF,SAAKzB,gBAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELM,QAAAA,OAAO,EAAE,KAFJ;AAGLa,QAAAA,KAAK,EAAElB,MAAM,CAACI;AAHT,OAAP;;AAKF;AACE,aAAOL,KAAP;AAhFJ;AAkFD,CAnFD","sourcesContent":["import {\n  GET_CONTADORES,\n  GET_ZONAS,\n  GET_CONTADORES_SECTOR,\n  ADD_CONTADORES,\n  LOADING_CONTADORES,\n  ERROR_CONTADORES,\n  UPDATE_CONTADORES,\n  FILTRAR_CONTADORES,\n  CLEAR_FILTER,\n  SET_FECHA,\n  LOADING_ZONAS,\n} from '../types';\n\nimport moment from 'moment';\n\nexport default (state, action) => {\n  switch (action.type) {\n    case GET_ZONAS:\n      return { ...state, loadingZonas: false, zonas: action.payload };\n    case LOADING_CONTADORES:\n      return {\n        ...state,\n        loading: true,\n      };\n    case LOADING_ZONAS:\n      return {\n        ...state,\n        loadingZonas: true,\n      };\n    case SET_FECHA:\n      return {\n        ...state,\n        thisFecha: action.payload,\n      };\n    case GET_CONTADORES:\n      return {\n        ...state,\n        contadores: action.payload,\n        loading: false,\n      };\n    case GET_CONTADORES_SECTOR:\n      return {\n        ...state,\n        contadorSector: action.payload,\n        loading: false,\n      };\n\n    case UPDATE_CONTADORES:\n      return {\n        ...state,\n        contadores: state.contadores.map((contador) =>\n          contador._id === action.payload._id ? action.payload : contador\n        ),\n        // contadorSector: state.contadorSector.map((cS) =>\n        //   cS._id.sector === action.payload.sectorId &&\n        //   moment(cS.fecha).isSame(action.payload.fecha, 'day')\n        //     ? { ...cS, contador: cS.contador + action.payload.deltaContador }\n        //     : cS\n        // ),\n        loading: false,\n      };\n    case ADD_CONTADORES:\n      return {\n        ...state,\n        contadores: [...state.contadores, action.payload],\n        // contadorSector: state.contadorSector.map((cS) =>\n        //   cS._id.sector === action.payload.sectorId &&\n        //   moment(cS.fecha).isSame(action.payload.fecha, 'day')\n        //     ? { ...cS, contador: cS.contador + action.payload.deltaContador }\n        //     : cS\n        // ),\n      };\n    case FILTRAR_CONTADORES:\n      return {\n        ...state,\n        contadoresDay: state.contadores.filter((cont) =>\n          moment(cont.fecha).isSame(action.payload, 'day')\n        ),\n        contadorSectorDay: state.contadorSector.filter((cont) =>\n          moment(cont.fecha).isSame(action.payload, 'day')\n        ),\n        loading: false,\n      };\n    case CLEAR_FILTER:\n      return {\n        ...state,\n        contadoresDay: null,\n        contadorSectorDay: null,\n      };\n    case ERROR_CONTADORES:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}