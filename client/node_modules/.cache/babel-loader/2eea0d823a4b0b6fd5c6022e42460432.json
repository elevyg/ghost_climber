{"ast":null,"code":"var _jsxFileName = \"/Users/eyallevyg/developer/ghost_climber/client/src/context/contadores/ContadoresState.js\";\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport groupBy from 'lodash/groupBy';\nimport renameKeys from '../../utils/renameKeys';\nimport ContadoresContext from './contadoresContext';\nimport contadoresReducer from './contadoresReducer';\nimport { GET_CONTADORES, ADD_CONTADORES, REST_CONTADORES, LOADING_CONTADORES, ERROR_CONTADORES } from '../types';\n\nconst ContadoresState = props => {\n  const initialState = {\n    contadores: null,\n    contadorSector: null,\n    loading: false,\n    error: null\n  };\n  const [state, dispatch] = useReducer(contadoresReducer, initialState); // Loading\n\n  const loadingContadores = () => {\n    const loading = true;\n    dispatch({\n      type: LOADING_CONTADORES,\n      payload: loading\n    });\n  }; // Get Zonas\n\n\n  const getContadores = async () => {\n    try {\n      loadingContadores();\n      const res = await axios.get(`/api/v1/contadores`);\n      let contadores = res.data.data;\n      dispatch({\n        type: GET_CONTADORES,\n        payload: contadores\n      });\n    } catch (err) {\n      dispatch({\n        type: ERROR_CONTADORES,\n        payload: err.response\n      });\n    }\n  }; // Calcular contadores por sector\n\n\n  const sumContadores = subsectoresId => {\n    console.log('Inside context API ' + subsectoresId.length);\n    const {\n      contadores\n    } = state;\n    let c;\n\n    if (contadores) {\n      console.log('Contadores: ' + contadores.length);\n      c = contadores.filter(c => subsectoresId.indexOf(c._id) !== -1);\n      console.log('Filtrados: ' + c.length); // .reduce((a, b) => a + (b.contador || 0), 0);\n    } else {\n      c = 0;\n    }\n\n    return c;\n  }; // // Filter Contacts\n  // const filterContacts = (text) => {\n  //   dispatch({ type: FILTER_CONTACTS, payload: text });\n  // };\n  // // Clear Filter\n  // const clearFilter = () => {\n  //   dispatch({ type: CLEAR_FILTER });\n  // };\n  // // Clear Contacts\n  // const clearContacts = () => dispatch({ type: CLEAR_CONTACTS });\n\n\n  return /*#__PURE__*/React.createElement(ContadoresContext.Provider, {\n    value: {\n      contadores: state.contadores,\n      contadorSector: state.contadorSector,\n      loading: state.loading,\n      error: state.error,\n      getContadores,\n      loadingContadores,\n      sumContadores\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default ContadoresState;","map":{"version":3,"sources":["/Users/eyallevyg/developer/ghost_climber/client/src/context/contadores/ContadoresState.js"],"names":["React","useReducer","axios","groupBy","renameKeys","ContadoresContext","contadoresReducer","GET_CONTADORES","ADD_CONTADORES","REST_CONTADORES","LOADING_CONTADORES","ERROR_CONTADORES","ContadoresState","props","initialState","contadores","contadorSector","loading","error","state","dispatch","loadingContadores","type","payload","getContadores","res","get","data","err","response","sumContadores","subsectoresId","console","log","length","c","filter","indexOf","_id","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport axios from 'axios';\nimport groupBy from 'lodash/groupBy';\nimport renameKeys from '../../utils/renameKeys';\n\nimport ContadoresContext from './contadoresContext';\nimport contadoresReducer from './contadoresReducer';\n\nimport {\n  GET_CONTADORES,\n  ADD_CONTADORES,\n  REST_CONTADORES,\n  LOADING_CONTADORES,\n  ERROR_CONTADORES,\n} from '../types';\n\nconst ContadoresState = (props) => {\n  const initialState = {\n    contadores: null,\n    contadorSector: null,\n    loading: false,\n    error: null,\n  };\n\n  const [state, dispatch] = useReducer(contadoresReducer, initialState);\n\n  // Loading\n  const loadingContadores = () => {\n    const loading = true;\n    dispatch({ type: LOADING_CONTADORES, payload: loading });\n  };\n\n  // Get Zonas\n  const getContadores = async () => {\n    try {\n      loadingContadores();\n      const res = await axios.get(`/api/v1/contadores`);\n\n      let contadores = res.data.data;\n\n      dispatch({ type: GET_CONTADORES, payload: contadores });\n    } catch (err) {\n      dispatch({ type: ERROR_CONTADORES, payload: err.response });\n    }\n  };\n\n  // Calcular contadores por sector\n  const sumContadores = (subsectoresId) => {\n    console.log('Inside context API ' + subsectoresId.length);\n\n    const { contadores } = state;\n    let c;\n    if (contadores) {\n      console.log('Contadores: ' + contadores.length);\n\n      c = contadores.filter((c) => subsectoresId.indexOf(c._id) !== -1);\n      console.log('Filtrados: ' + c.length);\n      // .reduce((a, b) => a + (b.contador || 0), 0);\n    } else {\n      c = 0;\n    }\n    return c;\n  };\n\n  // // Filter Contacts\n  // const filterContacts = (text) => {\n  //   dispatch({ type: FILTER_CONTACTS, payload: text });\n  // };\n\n  // // Clear Filter\n  // const clearFilter = () => {\n  //   dispatch({ type: CLEAR_FILTER });\n  // };\n\n  // // Clear Contacts\n\n  // const clearContacts = () => dispatch({ type: CLEAR_CONTACTS });\n\n  return (\n    <ContadoresContext.Provider\n      value={{\n        contadores: state.contadores,\n        contadorSector: state.contadorSector,\n        loading: state.loading,\n        error: state.error,\n        getContadores,\n        loadingContadores,\n        sumContadores,\n      }}\n    >\n      {props.children}\n    </ContadoresContext.Provider>\n  );\n};\n\nexport default ContadoresState;\n"]},"metadata":{},"sourceType":"module"}