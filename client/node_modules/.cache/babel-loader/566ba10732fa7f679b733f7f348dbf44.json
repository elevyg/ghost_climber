{"ast":null,"code":"var _jsxFileName = \"/Users/eyallevyg/developer/ghost_climber/client/src/context/contadores/ContadoresState.js\";\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport ContadoresContext from './contadoresContext';\nimport contadoresReducer from './contadoresReducer';\nimport { GET_CONTADORES, ADD_CONTADORES, REST_CONTADORES, LOADING_CONTADORES, ERROR_CONTADORES, GET_CONTADORES_SECTOR } from '../types';\n\nconst ContadoresState = props => {\n  const initialState = {\n    contadores: null,\n    thisContador: null,\n    contadorSector: null,\n    loading: false,\n    error: null\n  };\n  const [state, dispatch] = useReducer(contadoresReducer, initialState); // Loading\n\n  const loadingContadores = () => {\n    const loading = true;\n    dispatch({\n      type: LOADING_CONTADORES,\n      payload: loading\n    });\n  }; // Obtener contadores por subsector\n\n\n  const getContadores = async () => {\n    try {\n      loadingContadores();\n      const res = await axios.get(`/api/v1/contadores`);\n      let contadores = res.data.data;\n      dispatch({\n        type: GET_CONTADORES,\n        payload: contadores\n      });\n    } catch (err) {\n      dispatch({\n        type: ERROR_CONTADORES,\n        payload: err.response\n      });\n    }\n  }; // Obtener contadores por sector\n\n\n  const getContadorSector = async zonas => {\n    try {\n      loadingContadores();\n      const sectores = zonas.map(z => z.sector);\n      const sectoresId = [];\n\n      for (let i = 0; i < sectores.length; i++) {\n        sectores[i].map(s => sectoresId.push(s._id));\n      }\n\n      const res = await Promise.all(sectoresId.map(id => axios.get(`/api/v1/sectores/${id}/contadores`)));\n      const contadorSector = res.map(p => p.data.data);\n      dispatch({\n        type: GET_CONTADORES_SECTOR,\n        payload: contadorSector\n      });\n    } catch (err) {\n      dispatch({\n        type: ERROR_CONTADORES,\n        payload: err.response\n      });\n    }\n  }; // Add contador\n\n\n  const addContador = async (contador, contadorId) => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.put(`/api/v1/contadores/${contadorId}`, contador, config);\n      console.log(res.data.data);\n      dispatch({\n        type: ADD_CONTADORES,\n        payload: res.data.data\n      });\n    } catch (err) {\n      dispatch({\n        type: ERROR_CONTADORES,\n        payload: err.response.msg\n      });\n    }\n  };\n\n  const thisContador = async subsectorId => {\n    contador = state.contadores.filter(cont => cont.subsector._id === subsectorId);\n    dispatch({\n      type: THIS_CONTADOR,\n      payload: contador\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(ContadoresContext.Provider, {\n    value: {\n      contadores: state.contadores,\n      contadorSector: state.contadorSector,\n      loading: state.loading,\n      error: state.error,\n      getContadores,\n      loadingContadores,\n      getContadorSector,\n      addContador\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default ContadoresState;","map":{"version":3,"sources":["/Users/eyallevyg/developer/ghost_climber/client/src/context/contadores/ContadoresState.js"],"names":["React","useReducer","axios","ContadoresContext","contadoresReducer","GET_CONTADORES","ADD_CONTADORES","REST_CONTADORES","LOADING_CONTADORES","ERROR_CONTADORES","GET_CONTADORES_SECTOR","ContadoresState","props","initialState","contadores","thisContador","contadorSector","loading","error","state","dispatch","loadingContadores","type","payload","getContadores","res","get","data","err","response","getContadorSector","zonas","sectores","map","z","sector","sectoresId","i","length","s","push","_id","Promise","all","id","p","addContador","contador","contadorId","config","headers","put","console","log","msg","subsectorId","filter","cont","subsector","THIS_CONTADOR","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport axios from 'axios';\n\nimport ContadoresContext from './contadoresContext';\nimport contadoresReducer from './contadoresReducer';\n\nimport {\n  GET_CONTADORES,\n  ADD_CONTADORES,\n  REST_CONTADORES,\n  LOADING_CONTADORES,\n  ERROR_CONTADORES,\n  GET_CONTADORES_SECTOR,\n} from '../types';\n\nconst ContadoresState = (props) => {\n  const initialState = {\n    contadores: null,\n    thisContador: null,\n    contadorSector: null,\n    loading: false,\n    error: null,\n  };\n\n  const [state, dispatch] = useReducer(contadoresReducer, initialState);\n\n  // Loading\n  const loadingContadores = () => {\n    const loading = true;\n    dispatch({ type: LOADING_CONTADORES, payload: loading });\n  };\n\n  // Obtener contadores por subsector\n  const getContadores = async () => {\n    try {\n      loadingContadores();\n\n      const res = await axios.get(`/api/v1/contadores`);\n\n      let contadores = res.data.data;\n\n      dispatch({ type: GET_CONTADORES, payload: contadores });\n    } catch (err) {\n      dispatch({ type: ERROR_CONTADORES, payload: err.response });\n    }\n  };\n\n  // Obtener contadores por sector\n  const getContadorSector = async (zonas) => {\n    try {\n      loadingContadores();\n\n      const sectores = zonas.map((z) => z.sector);\n      const sectoresId = [];\n\n      for (let i = 0; i < sectores.length; i++) {\n        sectores[i].map((s) => sectoresId.push(s._id));\n      }\n\n      const res = await Promise.all(\n        sectoresId.map((id) => axios.get(`/api/v1/sectores/${id}/contadores`))\n      );\n\n      const contadorSector = res.map((p) => p.data.data);\n\n      dispatch({ type: GET_CONTADORES_SECTOR, payload: contadorSector });\n    } catch (err) {\n      dispatch({ type: ERROR_CONTADORES, payload: err.response });\n    }\n  };\n\n  // Add contador\n  const addContador = async (contador, contadorId) => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    try {\n      const res = await axios.put(\n        `/api/v1/contadores/${contadorId}`,\n        contador,\n        config\n      );\n      console.log(res.data.data);\n      dispatch({ type: ADD_CONTADORES, payload: res.data.data });\n    } catch (err) {\n      dispatch({ type: ERROR_CONTADORES, payload: err.response.msg });\n    }\n  };\n  const thisContador = async (subsectorId) => {\n    contador = state.contadores.filter(\n      (cont) => cont.subsector._id === subsectorId\n    );\n    dispatch({ type: THIS_CONTADOR, payload: contador });\n  };\n  return (\n    <ContadoresContext.Provider\n      value={{\n        contadores: state.contadores,\n        contadorSector: state.contadorSector,\n        loading: state.loading,\n        error: state.error,\n        getContadores,\n        loadingContadores,\n        getContadorSector,\n        addContador,\n      }}\n    >\n      {props.children}\n    </ContadoresContext.Provider>\n  );\n};\n\nexport default ContadoresState;\n"]},"metadata":{},"sourceType":"module"}