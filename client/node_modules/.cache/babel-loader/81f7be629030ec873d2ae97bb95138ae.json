{"ast":null,"code":"var _jsxFileName = \"/Users/eyallevyg/developer/ghost_climber/client/src/context/contadores/ContadoresState.js\";\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport ContadoresContext from './contadoresContext';\nimport contadoresReducer from './contadoresReducer';\nimport groupBy from 'lodash/groupBy';\nimport renameKeys from '../../utils/renameKeys';\nimport { GET_CONTADORES, GET_ZONAS, ADD_CONTADORES, LOADING_CONTADORES, LOADING_ZONAS, ERROR_CONTADORES, GET_CONTADORES_SECTOR, UPDATE_CONTADORES, FILTRAR_CONTADORES, CLEAR_FILTER, SET_FECHA } from '../types';\nimport sameDay from '../../utils/sameDay';\n\nconst ContadoresState = props => {\n  const initialState = {\n    zonas: null,\n    contadores: null,\n    contadoresDay: null,\n    contadorSector: null,\n    contadorSectorDay: null,\n    thisFecha: new Date(),\n    loading: false,\n    loadingZonas: false,\n    error: null\n  };\n  const [state, dispatch] = useReducer(contadoresReducer, initialState); // Loading contadores\n\n  const loadingContadores = () => {\n    dispatch({\n      type: LOADING_CONTADORES\n    });\n  }; // Loading\n\n\n  const setLoadingZonas = () => {\n    dispatch({\n      type: LOADING_ZONAS\n    });\n  }; // Get Zonas\n\n\n  const getZonas = async () => {\n    setLoadingZonas();\n\n    try {\n      const res = await axios.get('/api/v1/sectores');\n      let zonas = res.data.data;\n      zonas = Object.entries(groupBy(zonas, 'comuna')).map(zona => renameKeys({\n        0: 'comuna',\n        1: 'sector'\n      }, zona));\n      dispatch({\n        type: GET_ZONAS,\n        payload: zonas\n      });\n    } catch (err) {\n      dispatch({\n        type: ERROR_CONTADORES,\n        payload: err.response\n      });\n    }\n  }; // Obtener contadores por subsector\n\n\n  const getContadores = async () => {\n    loadingContadores();\n\n    try {\n      const res = await axios.get(`/api/v1/contadores`);\n      let contadores = res.data.data;\n      dispatch({\n        type: GET_CONTADORES,\n        payload: contadores\n      });\n    } catch (err) {\n      dispatch({\n        type: ERROR_CONTADORES,\n        payload: err.response\n      });\n    }\n  }; // Obtener contadores por sector\n\n\n  const getContadorSector = async zonas => {\n    try {\n      const sectores = zonas.map(z => z.sector);\n      const sectoresId = [];\n\n      for (let i = 0; i < sectores.length; i++) {\n        sectores[i].map(s => sectoresId.push(s._id));\n      }\n\n      const res = await Promise.all(sectoresId.map(id => axios.get(`/api/v1/sectores/${id}/contadores`)));\n      const contadorSector = res.map(p => p.data.data).flat(2);\n      dispatch({\n        type: GET_CONTADORES_SECTOR,\n        payload: contadorSector\n      });\n    } catch (err) {\n      dispatch({\n        type: ERROR_CONTADORES,\n        payload: err.response\n      });\n    }\n  }; // Add contador\n\n\n  const addContador = async (contador, contadorId, sectorId) => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    if (!contadorId) {\n      try {\n        const res = await axios.post(`/api/v1/subsectores/${contador.subsector._id}/contadores/`, contador, config);\n        res.data.data.sectorId = sectorId;\n        res.data.data.deltaContador = contador.contador;\n        dispatch({\n          type: ADD_CONTADORES,\n          payload: res.data.data\n        });\n      } catch (err) {\n        dispatch({\n          type: ERROR_CONTADORES,\n          payload: err.response.msg\n        });\n      }\n    } else {\n      try {\n        const res = await axios.put(`/api/v1/contadores/${contadorId}`, contador, config);\n        res.data.data.sectorId = sectorId;\n        res.data.data.deltaContador = contador.contador;\n        dispatch({\n          type: UPDATE_CONTADORES,\n          payload: res.data.data\n        });\n      } catch (err) {\n        dispatch({\n          type: ERROR_CONTADORES,\n          payload: err.response.msg\n        });\n      }\n    }\n  }; // Filtrar contador para subsector\n\n\n  const setThisContador = subsectorId => {\n    if (state.contadores) {\n      let contador = state.contadores.filter(cont => (cont.subsector._id === subsectorId || cont.subsector === subsectorId) && sameDay(cont.fecha, state.thisFecha));\n\n      if (contador.length === 0) {\n        contador = [{\n          subsector: {\n            _id: subsectorId\n          },\n          fecha: state.thisFecha,\n          contador: 0,\n          dbStatus: 401\n        }];\n      }\n\n      return contador[0];\n    }\n  };\n\n  const setThisContadorSector = sectorId => {\n    if (state.contadorSector) {\n      const cont = state.contadorSector.filter(cS => {\n        return cS._id.sector === sectorId && sameDay(cS.fecha, state.thisFecha);\n      });\n\n      if (cont.length > 0) {\n        const {\n          contador: res\n        } = cont.find(({\n          contador\n        }) => contador);\n        return res;\n      } else {\n        return 0;\n      }\n    }\n  }; // Fijar fecha\n\n\n  const setFecha = fecha => {\n    console.log(fecha);\n    dispatch({\n      type: SET_FECHA,\n      payload: fecha\n    });\n  }; // Filtrar contadores por dÃ­a seleccionado\n\n\n  const filtrarContadores = fecha => {\n    loadingContadores();\n    dispatch({\n      type: FILTRAR_CONTADORES,\n      payload: fecha\n    });\n  };\n\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(ContadoresContext.Provider, {\n    value: {\n      zonas: state.zonas,\n      contadores: state.contadores,\n      contadoresDay: state.contadoresDay,\n      contadorSector: state.contadorSector,\n      contadorSectorDay: state.contadorSectorDay,\n      thisFecha: state.thisFecha,\n      loading: state.loading,\n      loadingZonas: state.loadingZonas,\n      error: state.error,\n      getZonas,\n      getContadores,\n      loadingContadores,\n      getContadorSector,\n      addContador,\n      setThisContador,\n      setThisContadorSector,\n      filtrarContadores,\n      setFecha,\n      clearFilter,\n      setLoadingZonas\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default ContadoresState;","map":{"version":3,"sources":["/Users/eyallevyg/developer/ghost_climber/client/src/context/contadores/ContadoresState.js"],"names":["React","useReducer","axios","ContadoresContext","contadoresReducer","groupBy","renameKeys","GET_CONTADORES","GET_ZONAS","ADD_CONTADORES","LOADING_CONTADORES","LOADING_ZONAS","ERROR_CONTADORES","GET_CONTADORES_SECTOR","UPDATE_CONTADORES","FILTRAR_CONTADORES","CLEAR_FILTER","SET_FECHA","sameDay","ContadoresState","props","initialState","zonas","contadores","contadoresDay","contadorSector","contadorSectorDay","thisFecha","Date","loading","loadingZonas","error","state","dispatch","loadingContadores","type","setLoadingZonas","getZonas","res","get","data","Object","entries","map","zona","payload","err","response","getContadores","getContadorSector","sectores","z","sector","sectoresId","i","length","s","push","_id","Promise","all","id","p","flat","addContador","contador","contadorId","sectorId","config","headers","post","subsector","deltaContador","msg","put","setThisContador","subsectorId","filter","cont","fecha","dbStatus","setThisContadorSector","cS","find","setFecha","console","log","filtrarContadores","clearFilter","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport axios from 'axios';\n\nimport ContadoresContext from './contadoresContext';\nimport contadoresReducer from './contadoresReducer';\n\nimport groupBy from 'lodash/groupBy';\nimport renameKeys from '../../utils/renameKeys';\n\nimport {\n  GET_CONTADORES,\n  GET_ZONAS,\n  ADD_CONTADORES,\n  LOADING_CONTADORES,\n  LOADING_ZONAS,\n  ERROR_CONTADORES,\n  GET_CONTADORES_SECTOR,\n  UPDATE_CONTADORES,\n  FILTRAR_CONTADORES,\n  CLEAR_FILTER,\n  SET_FECHA,\n} from '../types';\nimport sameDay from '../../utils/sameDay';\n\nconst ContadoresState = (props) => {\n  const initialState = {\n    zonas: null,\n    contadores: null,\n    contadoresDay: null,\n    contadorSector: null,\n    contadorSectorDay: null,\n    thisFecha: new Date(),\n    loading: false,\n    loadingZonas: false,\n    error: null,\n  };\n\n  const [state, dispatch] = useReducer(contadoresReducer, initialState);\n\n  // Loading contadores\n  const loadingContadores = () => {\n    dispatch({ type: LOADING_CONTADORES });\n  };\n  // Loading\n  const setLoadingZonas = () => {\n    dispatch({ type: LOADING_ZONAS });\n  };\n\n  // Get Zonas\n  const getZonas = async () => {\n    setLoadingZonas();\n    try {\n      const res = await axios.get('/api/v1/sectores');\n\n      let zonas = res.data.data;\n\n      zonas = Object.entries(groupBy(zonas, 'comuna')).map((zona) =>\n        renameKeys({ 0: 'comuna', 1: 'sector' }, zona)\n      );\n\n      dispatch({ type: GET_ZONAS, payload: zonas });\n    } catch (err) {\n      dispatch({ type: ERROR_CONTADORES, payload: err.response });\n    }\n  };\n\n  // Obtener contadores por subsector\n  const getContadores = async () => {\n    loadingContadores();\n    try {\n      const res = await axios.get(`/api/v1/contadores`);\n\n      let contadores = res.data.data;\n\n      dispatch({ type: GET_CONTADORES, payload: contadores });\n    } catch (err) {\n      dispatch({ type: ERROR_CONTADORES, payload: err.response });\n    }\n  };\n\n  // Obtener contadores por sector\n  const getContadorSector = async (zonas) => {\n    try {\n      const sectores = zonas.map((z) => z.sector);\n\n      const sectoresId = [];\n\n      for (let i = 0; i < sectores.length; i++) {\n        sectores[i].map((s) => sectoresId.push(s._id));\n      }\n\n      const res = await Promise.all(\n        sectoresId.map((id) => axios.get(`/api/v1/sectores/${id}/contadores`))\n      );\n\n      const contadorSector = res.map((p) => p.data.data).flat(2);\n\n      dispatch({ type: GET_CONTADORES_SECTOR, payload: contadorSector });\n    } catch (err) {\n      dispatch({ type: ERROR_CONTADORES, payload: err.response });\n    }\n  };\n\n  // Add contador\n  const addContador = async (contador, contadorId, sectorId) => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    if (!contadorId) {\n      try {\n        const res = await axios.post(\n          `/api/v1/subsectores/${contador.subsector._id}/contadores/`,\n          contador,\n          config\n        );\n\n        res.data.data.sectorId = sectorId;\n        res.data.data.deltaContador = contador.contador;\n\n        dispatch({ type: ADD_CONTADORES, payload: res.data.data });\n      } catch (err) {\n        dispatch({ type: ERROR_CONTADORES, payload: err.response.msg });\n      }\n    } else {\n      try {\n        const res = await axios.put(\n          `/api/v1/contadores/${contadorId}`,\n          contador,\n          config\n        );\n        res.data.data.sectorId = sectorId;\n        res.data.data.deltaContador = contador.contador;\n\n        dispatch({ type: UPDATE_CONTADORES, payload: res.data.data });\n      } catch (err) {\n        dispatch({ type: ERROR_CONTADORES, payload: err.response.msg });\n      }\n    }\n  };\n\n  // Filtrar contador para subsector\n  const setThisContador = (subsectorId) => {\n    if (state.contadores) {\n      let contador = state.contadores.filter(\n        (cont) =>\n          (cont.subsector._id === subsectorId ||\n            cont.subsector === subsectorId) &&\n          sameDay(cont.fecha, state.thisFecha)\n      );\n\n      if (contador.length === 0) {\n        contador = [\n          {\n            subsector: {\n              _id: subsectorId,\n            },\n            fecha: state.thisFecha,\n            contador: 0,\n            dbStatus: 401,\n          },\n        ];\n      }\n\n      return contador[0];\n    }\n  };\n\n  const setThisContadorSector = (sectorId) => {\n    if (state.contadorSector) {\n      const cont = state.contadorSector.filter((cS) => {\n        return cS._id.sector === sectorId && sameDay(cS.fecha, state.thisFecha);\n      });\n\n      if (cont.length > 0) {\n        const { contador: res } = cont.find(({ contador }) => contador);\n        return res;\n      } else {\n        return 0;\n      }\n    }\n  };\n\n  // Fijar fecha\n  const setFecha = (fecha) => {\n    console.log(fecha);\n    dispatch({ type: SET_FECHA, payload: fecha });\n  };\n\n  // Filtrar contadores por dÃ­a seleccionado\n  const filtrarContadores = (fecha) => {\n    loadingContadores();\n    dispatch({ type: FILTRAR_CONTADORES, payload: fecha });\n  };\n\n  const clearFilter = () => {\n    dispatch({ type: CLEAR_FILTER });\n  };\n\n  return (\n    <ContadoresContext.Provider\n      value={{\n        zonas: state.zonas,\n        contadores: state.contadores,\n        contadoresDay: state.contadoresDay,\n        contadorSector: state.contadorSector,\n        contadorSectorDay: state.contadorSectorDay,\n        thisFecha: state.thisFecha,\n        loading: state.loading,\n        loadingZonas: state.loadingZonas,\n        error: state.error,\n        getZonas,\n        getContadores,\n        loadingContadores,\n        getContadorSector,\n        addContador,\n        setThisContador,\n        setThisContadorSector,\n        filtrarContadores,\n        setFecha,\n        clearFilter,\n        setLoadingZonas,\n      }}\n    >\n      {props.children}\n    </ContadoresContext.Provider>\n  );\n};\n\nexport default ContadoresState;\n"]},"metadata":{},"sourceType":"module"}