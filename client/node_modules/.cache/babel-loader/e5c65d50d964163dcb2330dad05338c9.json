{"ast":null,"code":"import _objectWithoutProperties from\"/Users/eyallevyg/developer/ghost_climber/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import React,{useContext,Fragment}from'react';import{Route,Redirect}from'react-router-dom';import AuthContext from'../../context/auth/authContext';var PrivateRoute=function PrivateRoute(_ref){var Component=_ref.component,rest=_objectWithoutProperties(_ref,[\"component\"]);var authContext=useContext(AuthContext);var isAuthenticated=authContext.isAuthenticated,loading=authContext.loading;return/*#__PURE__*/React.createElement(Fragment,null,/*#__PURE__*/React.createElement(Route,Object.assign({},rest,{render:function render(props){return!isAuthenticated?/*#__PURE__*/React.createElement(Redirect,{to:\"/landing\"}):/*#__PURE__*/React.createElement(Component,props);}})));};export default PrivateRoute;","map":{"version":3,"sources":["/Users/eyallevyg/developer/ghost_climber/client/src/components/routing/PrivateRoute.js"],"names":["React","useContext","Fragment","Route","Redirect","AuthContext","PrivateRoute","Component","component","rest","authContext","isAuthenticated","loading","props"],"mappings":"0LAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,CAA4BC,QAA5B,KAA4C,OAA5C,CACA,OAASC,KAAT,CAAgBC,QAAhB,KAAgC,kBAAhC,CACA,MAAOC,CAAAA,WAAP,KAAwB,gCAAxB,CAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAAuC,IAAzBC,CAAAA,SAAyB,MAApCC,SAAoC,CAAXC,IAAW,8CAC1D,GAAMC,CAAAA,WAAW,CAAGT,UAAU,CAACI,WAAD,CAA9B,CAD0D,GAGlDM,CAAAA,eAHkD,CAGrBD,WAHqB,CAGlDC,eAHkD,CAGjCC,OAHiC,CAGrBF,WAHqB,CAGjCE,OAHiC,CAK1D,mBACE,oBAAC,QAAD,mBACE,oBAAC,KAAD,kBACMH,IADN,EAEE,MAAM,CAAE,gBAACI,KAAD,QACN,CAACF,eAAD,cACE,oBAAC,QAAD,EAAU,EAAE,CAAC,UAAb,EADF,cAGE,oBAAC,SAAD,CAAeE,KAAf,CAJI,EAFV,GADF,CADF,CAcD,CAnBD,CAqBA,cAAeP,CAAAA,YAAf","sourcesContent":["import React, { useContext, Fragment } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport AuthContext from '../../context/auth/authContext';\n\nconst PrivateRoute = ({ component: Component, ...rest }) => {\n  const authContext = useContext(AuthContext);\n\n  const { isAuthenticated, loading } = authContext;\n\n  return (\n    <Fragment>\n      <Route\n        {...rest}\n        render={(props) =>\n          !isAuthenticated ? (\n            <Redirect to='/landing' />\n          ) : (\n            <Component {...props} />\n          )\n        }\n      />\n    </Fragment>\n  );\n};\n\nexport default PrivateRoute;\n"]},"metadata":{},"sourceType":"module"}