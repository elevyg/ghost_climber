{"ast":null,"code":"var _jsxFileName = \"/Users/eyallevyg/developer/ghost_climber/client/src/context/contadores/ContadoresState.js\";\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport ContadoresContext from './contadoresContext';\nimport contadoresReducer from './contadoresReducer';\nimport groupBy from 'lodash/groupBy';\nimport renameKeys from '../../utils/renameKeys';\nimport { GET_CONTADORES, GET_ZONAS, ADD_CONTADORES, ADD_CONTADOR_SECTOR, LOADING_CONTADORES, ERROR_CONTADORES, GET_CONTADORES_SECTOR, UPDATE_CONTADORES, FILTRAR_CONTADORES, CLEAR_FILTER, SET_FECHA } from '../types';\nimport sameDay from '../../utils/sameDay';\n\nconst ContadoresState = props => {\n  const initialState = {\n    zonas: null,\n    contadores: null,\n    contadoresDay: null,\n    contadorSector: null,\n    contadorSectorDay: null,\n    thisFecha: new Date(),\n    loading: false,\n    error: null\n  };\n  const [state, dispatch] = useReducer(contadoresReducer, initialState); // Get Zonas\n\n  const getZonas = async () => {\n    try {\n      loadingContadores();\n      const res = await axios.get('/api/v1/sectores');\n      let zonas = res.data.data;\n      zonas = Object.entries(groupBy(zonas, 'comuna')).map(zona => renameKeys({\n        0: 'comuna',\n        1: 'sector'\n      }, zona));\n      dispatch({\n        type: GET_ZONAS,\n        payload: zonas\n      });\n    } catch (err) {\n      dispatch({\n        type: ERROR_CONTADORES,\n        payload: err.response\n      });\n    }\n  }; // Loading\n\n\n  const loadingContadores = () => {\n    const loading = true;\n    dispatch({\n      type: LOADING_CONTADORES,\n      payload: loading\n    });\n  }; // Obtener contadores por subsector\n\n\n  const getContadores = async () => {\n    try {\n      loadingContadores();\n      const res = await axios.get(`/api/v1/contadores`);\n      let contadores = res.data.data;\n      dispatch({\n        type: GET_CONTADORES,\n        payload: contadores\n      });\n    } catch (err) {\n      dispatch({\n        type: ERROR_CONTADORES,\n        payload: err.response\n      });\n    }\n  }; // Obtener contadores por sector\n\n\n  const getContadorSector = async () => {\n    try {\n      loadingContadores();\n      console.log('Hola');\n      const sectores = state.zonas.map(z => z.sector);\n      console.log(state.zonas);\n      const sectoresId = [];\n\n      for (let i = 0; i < sectores.length; i++) {\n        sectores[i].map(s => sectoresId.push(s._id));\n      }\n\n      const res = await Promise.all(sectoresId.map(id => axios.get(`/api/v1/sectores/${id}/contadores`)));\n      const contadorSector = res.map(p => p.data.data).flat(2);\n      dispatch({\n        type: GET_CONTADORES_SECTOR,\n        payload: contadorSector\n      });\n    } catch (err) {\n      dispatch({\n        type: ERROR_CONTADORES,\n        payload: err.response\n      });\n    }\n  }; // Add contador\n\n\n  const addContador = async (contador, contadorId, sectorId) => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    if (!contadorId) {\n      try {\n        const res = await axios.post(`/api/v1/subsectores/${contador.subsector._id}/contadores/`, contador, config);\n        res.data.data.sectorId = sectorId;\n        res.data.data.deltaContador = contador.contador;\n        dispatch({\n          type: ADD_CONTADORES,\n          payload: res.data.data\n        });\n      } catch (err) {\n        dispatch({\n          type: ERROR_CONTADORES,\n          payload: err.response.msg\n        });\n      }\n    } else {\n      try {\n        const res = await axios.put(`/api/v1/contadores/${contadorId}`, contador, config);\n        res.data.data.sectorId = sectorId;\n        res.data.data.deltaContador = contador.contador;\n        dispatch({\n          type: UPDATE_CONTADORES,\n          payload: res.data.data\n        });\n      } catch (err) {\n        dispatch({\n          type: ERROR_CONTADORES,\n          payload: err.response.msg\n        });\n      }\n    }\n  };\n\n  const addContadorSector = (sectorId, fecha) => {\n    const contadorExist = state.contadorSector.filter(cS => cS._id === sectorId && sameDay(cS.fecha, state.thisFecha));\n\n    if (contadorExist.length === 0) {\n      const contadorSector = {\n        _id: {\n          sector: sectorId\n        },\n        fecha,\n        contador: 0\n      };\n      dispatch({\n        type: ADD_CONTADOR_SECTOR,\n        payload: contadorSector\n      });\n    }\n  }; // Filtrar contador para subsector\n\n\n  const setThisContador = subsectorId => {\n    if (state.contadoresDay) {\n      let contador = state.contadoresDay.filter(cont => cont.subsector._id === subsectorId || cont.subsector === subsectorId);\n\n      if (contador.length === 0) {\n        contador = [{\n          subsector: {\n            _id: subsectorId\n          },\n          fecha: state.thisFecha,\n          contador: 0,\n          dbStatus: 401\n        }];\n      }\n\n      return contador[0];\n    }\n  }; // Fijar fecha\n\n\n  const setFecha = fecha => {\n    dispatch({\n      type: SET_FECHA,\n      payload: fecha\n    });\n  }; // Filtrar contadores por dÃ­a seleccionado\n\n\n  const filtrarContadores = fecha => {\n    loadingContadores();\n    dispatch({\n      type: FILTRAR_CONTADORES,\n      payload: fecha\n    });\n  };\n\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(ContadoresContext.Provider, {\n    value: {\n      zonas: state.zonas,\n      contadores: state.contadores,\n      contadoresDay: state.contadoresDay,\n      contadorSector: state.contadorSector,\n      contadorSectorDay: state.contadorSectorDay,\n      thisFecha: state.thisFecha,\n      loading: state.loading,\n      error: state.error,\n      getZonas,\n      getContadores,\n      loadingContadores,\n      getContadorSector,\n      addContadorSector,\n      addContador,\n      setThisContador,\n      filtrarContadores,\n      setFecha,\n      clearFilter\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default ContadoresState;","map":{"version":3,"sources":["/Users/eyallevyg/developer/ghost_climber/client/src/context/contadores/ContadoresState.js"],"names":["React","useReducer","axios","ContadoresContext","contadoresReducer","groupBy","renameKeys","GET_CONTADORES","GET_ZONAS","ADD_CONTADORES","ADD_CONTADOR_SECTOR","LOADING_CONTADORES","ERROR_CONTADORES","GET_CONTADORES_SECTOR","UPDATE_CONTADORES","FILTRAR_CONTADORES","CLEAR_FILTER","SET_FECHA","sameDay","ContadoresState","props","initialState","zonas","contadores","contadoresDay","contadorSector","contadorSectorDay","thisFecha","Date","loading","error","state","dispatch","getZonas","loadingContadores","res","get","data","Object","entries","map","zona","type","payload","err","response","getContadores","getContadorSector","console","log","sectores","z","sector","sectoresId","i","length","s","push","_id","Promise","all","id","p","flat","addContador","contador","contadorId","sectorId","config","headers","post","subsector","deltaContador","msg","put","addContadorSector","fecha","contadorExist","filter","cS","setThisContador","subsectorId","cont","dbStatus","setFecha","filtrarContadores","clearFilter","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport axios from 'axios';\n\nimport ContadoresContext from './contadoresContext';\nimport contadoresReducer from './contadoresReducer';\n\nimport groupBy from 'lodash/groupBy';\nimport renameKeys from '../../utils/renameKeys';\n\nimport {\n  GET_CONTADORES,\n  GET_ZONAS,\n  ADD_CONTADORES,\n  ADD_CONTADOR_SECTOR,\n  LOADING_CONTADORES,\n  ERROR_CONTADORES,\n  GET_CONTADORES_SECTOR,\n  UPDATE_CONTADORES,\n  FILTRAR_CONTADORES,\n  CLEAR_FILTER,\n  SET_FECHA,\n} from '../types';\nimport sameDay from '../../utils/sameDay';\n\nconst ContadoresState = (props) => {\n  const initialState = {\n    zonas: null,\n    contadores: null,\n    contadoresDay: null,\n    contadorSector: null,\n    contadorSectorDay: null,\n    thisFecha: new Date(),\n    loading: false,\n    error: null,\n  };\n\n  const [state, dispatch] = useReducer(contadoresReducer, initialState);\n\n  // Get Zonas\n  const getZonas = async () => {\n    try {\n      loadingContadores();\n      const res = await axios.get('/api/v1/sectores');\n\n      let zonas = res.data.data;\n\n      zonas = Object.entries(groupBy(zonas, 'comuna')).map((zona) =>\n        renameKeys({ 0: 'comuna', 1: 'sector' }, zona)\n      );\n\n      dispatch({ type: GET_ZONAS, payload: zonas });\n    } catch (err) {\n      dispatch({ type: ERROR_CONTADORES, payload: err.response });\n    }\n  };\n\n  // Loading\n  const loadingContadores = () => {\n    const loading = true;\n    dispatch({ type: LOADING_CONTADORES, payload: loading });\n  };\n\n  // Obtener contadores por subsector\n  const getContadores = async () => {\n    try {\n      loadingContadores();\n\n      const res = await axios.get(`/api/v1/contadores`);\n\n      let contadores = res.data.data;\n\n      dispatch({ type: GET_CONTADORES, payload: contadores });\n    } catch (err) {\n      dispatch({ type: ERROR_CONTADORES, payload: err.response });\n    }\n  };\n\n  // Obtener contadores por sector\n  const getContadorSector = async () => {\n    try {\n      loadingContadores();\n      console.log('Hola');\n\n      const sectores = state.zonas.map((z) => z.sector);\n      console.log(state.zonas);\n      const sectoresId = [];\n\n      for (let i = 0; i < sectores.length; i++) {\n        sectores[i].map((s) => sectoresId.push(s._id));\n      }\n\n      const res = await Promise.all(\n        sectoresId.map((id) => axios.get(`/api/v1/sectores/${id}/contadores`))\n      );\n\n      const contadorSector = res.map((p) => p.data.data).flat(2);\n\n      dispatch({ type: GET_CONTADORES_SECTOR, payload: contadorSector });\n    } catch (err) {\n      dispatch({ type: ERROR_CONTADORES, payload: err.response });\n    }\n  };\n\n  // Add contador\n  const addContador = async (contador, contadorId, sectorId) => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n    if (!contadorId) {\n      try {\n        const res = await axios.post(\n          `/api/v1/subsectores/${contador.subsector._id}/contadores/`,\n          contador,\n          config\n        );\n\n        res.data.data.sectorId = sectorId;\n        res.data.data.deltaContador = contador.contador;\n        dispatch({ type: ADD_CONTADORES, payload: res.data.data });\n      } catch (err) {\n        dispatch({ type: ERROR_CONTADORES, payload: err.response.msg });\n      }\n    } else {\n      try {\n        const res = await axios.put(\n          `/api/v1/contadores/${contadorId}`,\n          contador,\n          config\n        );\n        res.data.data.sectorId = sectorId;\n        res.data.data.deltaContador = contador.contador;\n        dispatch({ type: UPDATE_CONTADORES, payload: res.data.data });\n      } catch (err) {\n        dispatch({ type: ERROR_CONTADORES, payload: err.response.msg });\n      }\n    }\n  };\n\n  const addContadorSector = (sectorId, fecha) => {\n    const contadorExist = state.contadorSector.filter(\n      (cS) => cS._id === sectorId && sameDay(cS.fecha, state.thisFecha)\n    );\n\n    if (contadorExist.length === 0) {\n      const contadorSector = {\n        _id: { sector: sectorId },\n        fecha,\n        contador: 0,\n      };\n      dispatch({ type: ADD_CONTADOR_SECTOR, payload: contadorSector });\n    }\n  };\n\n  // Filtrar contador para subsector\n  const setThisContador = (subsectorId) => {\n    if (state.contadoresDay) {\n      let contador = state.contadoresDay.filter(\n        (cont) =>\n          cont.subsector._id === subsectorId || cont.subsector === subsectorId\n      );\n\n      if (contador.length === 0) {\n        contador = [\n          {\n            subsector: {\n              _id: subsectorId,\n            },\n            fecha: state.thisFecha,\n            contador: 0,\n            dbStatus: 401,\n          },\n        ];\n      }\n\n      return contador[0];\n    }\n  };\n\n  // Fijar fecha\n  const setFecha = (fecha) => {\n    dispatch({ type: SET_FECHA, payload: fecha });\n  };\n\n  // Filtrar contadores por dÃ­a seleccionado\n  const filtrarContadores = (fecha) => {\n    loadingContadores();\n    dispatch({ type: FILTRAR_CONTADORES, payload: fecha });\n  };\n\n  const clearFilter = () => {\n    dispatch({ type: CLEAR_FILTER });\n  };\n  return (\n    <ContadoresContext.Provider\n      value={{\n        zonas: state.zonas,\n        contadores: state.contadores,\n        contadoresDay: state.contadoresDay,\n        contadorSector: state.contadorSector,\n        contadorSectorDay: state.contadorSectorDay,\n        thisFecha: state.thisFecha,\n        loading: state.loading,\n        error: state.error,\n        getZonas,\n        getContadores,\n        loadingContadores,\n        getContadorSector,\n        addContadorSector,\n        addContador,\n        setThisContador,\n        filtrarContadores,\n        setFecha,\n        clearFilter,\n      }}\n    >\n      {props.children}\n    </ContadoresContext.Provider>\n  );\n};\n\nexport default ContadoresState;\n"]},"metadata":{},"sourceType":"module"}